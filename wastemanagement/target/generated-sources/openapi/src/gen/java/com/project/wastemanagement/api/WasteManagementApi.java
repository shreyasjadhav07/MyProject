/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.wastemanagement.api;

import com.project.wastemanagement.dto.ErrorDto;
import com.project.wastemanagement.dto.WasteManagementDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-19T22:03:52.612060600+05:30[Asia/Calcutta]")
@Validated
@Api(value = "WasteManagement", description = "the WasteManagement API")
public interface WasteManagementApi {

    default WasteManagementApiDelegate getDelegate() {
        return new WasteManagementApiDelegate() {};
    }

    /**
     * POST /v1/md/wm/ : Create waste details for user
     *
     * @param wasteManagementDto Create waste details for user (optional)
     * @return WasteManagement created successfully (status code 201)
     *         or Already Reported (status code 208)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create waste details for user", nickname = "createDetails", notes = "", response = WasteManagementDto.class, tags={ "WasteManagement", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "WasteManagement created successfully", response = WasteManagementDto.class),
        @ApiResponse(code = 208, message = "Already Reported"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @PostMapping(
        value = "/v1/md/wm/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WasteManagementDto> createDetails(@ApiParam(value = "Create waste details for user"  )  @Valid @RequestBody(required = false) WasteManagementDto wasteManagementDto) throws Exception {
        return getDelegate().createDetails(wasteManagementDto);
    }


    /**
     * GET /v1/md/wm/wastemanagement/ : get all waste detail  for users
     * get all waste detail  for users
     *
     * @return data is successfully retrieved from the database (status code 200)
     *         or Already Reported (status code 208)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get all waste detail  for users", nickname = "getAllDetails", notes = "get all waste detail  for users", response = WasteManagementDto.class, responseContainer = "List", tags={ "WasteManagement", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "data is successfully retrieved from the database", response = WasteManagementDto.class, responseContainer = "List"),
        @ApiResponse(code = 208, message = "Already Reported"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @GetMapping(
        value = "/v1/md/wm/wastemanagement/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<WasteManagementDto>> getAllDetails() throws Exception {
        return getDelegate().getAllDetails();
    }

}
